"""Autogenerated solution template, v2"""
__version__ = 2

from itertools import product
from typing import List, Any, Tuple
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input

from lib.asciimap import SparseAsciiMap

data = read_entire_input(2024,8)
test = """............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............""".split("\n")

def parse(data: List[str]) -> SparseAsciiMap:
    ascmap: SparseAsciiMap = SparseAsciiMap(data, ".", True)
    return ascmap

#@solution_timer(2024,8,1)
def part_one(data: List[str], verbose=False):
    ascmap = parse(data)
    antinodes = set()
    for frequency in ascmap.reverse_lookup:
        for p1, p2 in product(ascmap.reverse_lookup[frequency],repeat=2):
            if p1 == p2:
                continue
            delta = p1[0]-p2[0], p1[1]-p2[1]
            q1 = p1[0]+delta[0], p1[1]+delta[1]
            q2 = p2[0]-delta[0], p2[1]-delta[1]
            if q1 in ascmap:
                antinodes.add(q1)
            if q2 in ascmap:
                antinodes.add(q2)
    return len(antinodes)

#@solution_timer(2024,8,2)
def part_two(data: List[str], verbose=False):
    ascmap = parse(data)
    antinodes = set()
    for frequency in ascmap.reverse_lookup:
        for p1, p2 in product(ascmap.reverse_lookup[frequency],repeat=2):
            if p1 == p2:
                continue
            delta = p1[0]-p2[0], p1[1]-p2[1]
            q1 = p1
            while q1 in ascmap:
                antinodes.add(q1)
                q1 = q1[0] + delta[0], q1[1] + delta[1]
            q2 = p2
            while q2 in ascmap:
                antinodes.add(q2)
                q2 = q2[0] - delta[0], q2[1] - delta[1]

    return len(antinodes)

if __name__ == "__main__":
    data = read_entire_input(2024,8)
    part_one(data)
    part_two(data)