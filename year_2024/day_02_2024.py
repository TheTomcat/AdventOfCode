"""Autogenerated solution template, v2"""
__version__ = 2
from typing import List, Any, Tuple
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input
from lib.iterators import window

data = read_entire_input(2024,2)
test = """7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9""".split("\n")

def parse(data: List[str]) -> List[List[int]]:
    output = []
    for row in data:
        output.append(list(map(int, row.split(" "))))
    return output

def rules(report: List[int]) -> bool:
    diffs = [a-b for a,b in window(report, 2)]
    return (all([i < 0 for i in diffs]) or all([i > 0 for i in diffs])) and all([1 <= abs(i) <= 3 for i in diffs])

#@solution_timer(2024,2,1)
def part_one(data: List[str], verbose=False):
    reports = parse(data)
    safe = [rules(report) for report in reports]
    return sum(safe)

def drop(iter, n):
    for i, x in enumerate(iter):
        if i == n:
            continue
        yield x

def rules2(report: List[int]) -> bool:
    # base
    diffs = [a-b for a,b in window(report, 2)]
    c = (all([i < 0 for i in diffs]) or all([i > 0 for i in diffs])) and all([1 <= abs(i) <= 3 for i in diffs])
    if c: 
        return c
    # base2
    for removal in range(len(report)):
        diffs = [a-b for a,b in window(drop(report, removal), 2)]
        c = (all([i < 0 for i in diffs]) or all([i > 0 for i in diffs])) and all([1 <= abs(i) <= 3 for i in diffs])
        if c:
            return c
    return False


#@solution_timer(2024,2,2)
def part_two(data: List[str], verbose=False):
    reports = parse(data)
    safe = [rules2(report) for report in reports]
    return sum(safe)

if __name__ == "__main__":
    data = read_entire_input(2024,2)
    part_one(data)
    part_two(data)