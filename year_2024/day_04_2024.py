"""Autogenerated solution template, v2"""
__version__ = 2

from typing import List, Any, Tuple, Dict
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input

data = read_entire_input(2024,4)
test = """MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX""".split("\n")

def parse(data: List[str]) -> Tuple[Dict[Tuple[int,int],str], int, int]:
    output = {}
    for y, row in enumerate(data):
        for x, v in enumerate(row):
            output[(x,y)] = v
    return output, len(data), len(data[0])

#@solution_timer(2024,4,1)
def part_one(data: List[str], verbose=False):
    block, Y, X = parse(data)
    # find an X
    tot = 0
    for y in range(Y):
        for x in range(X):
            if block[(x,y)] == 'X':
                # look around for subsequent MAS
                for dy in [-1,0,1]:
                    for dx in [-1,0,1]:
                        if dy == dx == 0:
                            continue
                        try:
                            a,b,c = block[(x+dx,y+dy)], block[(x+2*dx,y+2*dy)], block[(x+3*dx,y+3*dy)]
                            if a == 'M' and b == 'A' and c == 'S':
                                tot += 1
                        except KeyError:
                            ...
    return tot

#@solution_timer(2024,4,2)
def part_two(data: List[str], verbose=False):
    block, Y, X = parse(data)
    # find an X
    tot = 0
    for y in range(Y):
        for x in range(X):
            if block[(x,y)] != 'A':
                continue
            try:
                a,b,c,d = block[(x-1,y-1)], block[(x-1,y+1)], block[(x+1,y+1)], block[(x+1,y-1)]
                if (a == 'M' and c == 'S') or (a=='S' and c == 'M'):
                    if (b == 'M' and d == 'S') or (b == 'S' and d == 'M'):
                        tot += 1
            except KeyError:
                ...
    return tot

if __name__ == "__main__":
    data = read_entire_input(2024,4)
    part_one(data)
    part_two(data)