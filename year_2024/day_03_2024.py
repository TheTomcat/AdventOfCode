"""Autogenerated solution template, v2"""
__version__ = 2

from typing import List, Any, Tuple
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input
import re

data = read_entire_input(2024,3)
test = """xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))""".split("\n")
test = """xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))""".split("\n")
def parse(data: List[str]) -> List[str]:
    return data

def sumprod(x: List[List[str]]) -> int:
    return sum([int(a)*int(b) for a,b in x])

#@solution_timer(2024,3,1)
def part_one(data: List[str], verbose=False):
    instr = parse(data)
    pattern= r'mul\((\d+),(\d+)\)'
    tot = 0
    for mem in instr:
        tot += sumprod(re.findall(pattern, mem))
    return tot

#@solution_timer(2024,3,2)
def part_two(data: List[str], verbose=False):
    instr = parse(data)
    pattern = r"(?:mul\((\d+),(\d+)\))|(do\(\))|(don't\(\))"
    tot = 0
    en=True
    for mem in instr:
        for command in re.findall(pattern, mem):
            if command == ('','','do()',''):
                en = True
            elif command == ('','','',"don't()"):
                en = False
            else:
                tot += int(command[0]) * int(command[1]) if en else 0
    return tot

if __name__ == "__main__":
    data = read_entire_input(2024,3)
    part_one(data)
    part_two(data)