"""Autogenerated solution template, v2"""
__version__ = 2

from collections import Counter
from typing import Generator, List, Any, Tuple

from tqdm import trange
from framework.input_helper import read_entire_input
from lib.linkedlist import Node

YEAR = 2024
DAY = 11
VERSION = "None"

data = read_entire_input(2024,11)
# test = """0 1 10 99 999""".split("\n")
test = """125 17""".split("\n")

def parse(data: List[str]) -> Any:
    stones = data[0].split(" ")
    head = Node(int(stones[0]))
    n = head
    for val in stones[1:]:
        n = n.insert_after(int(val))

    return head

def blink(head: Node):
    node = head
    while node is not None:
        if node.value == 0:
            node.value = 1
            node = node.next
        elif (L := len(f'{node.value}')) % 2 == 0:
            v2 = int(f'{node.value}'[L//2:])
            v1 = int(f'{node.value}'[:L//2])
            node.value = v1
            node = node.insert_after(v2).next
        else:
            node.value *= 2024
            node = node.next

def count(head: Node) -> int:
    c = 0
    n = head
    while n is not None:
        c += 1
        n = n.next
    return c

def pprint(head: Node, lim=None):
    n = head
    print(f"{n.value} -> ", end="")
    while n := n.next:
        print(f"{n.value} -> ", end="")

def part_one(data: List[str], verbose=False):
    head = parse(data)
    for _ in range(25):
        blink(head)
        # print(count(head))

    return count(head)

def parse2(data: List[str]) -> Counter:
    c = Counter([int(a) for a in data[0].split(" ")])
    # for val in data[0].split(" "):
    #     c[int(val)] += 1
    return c

def change(stone: int) -> Generator[int, None, None]:
    if stone == 0:
        yield 1
    elif (L := len(f'{stone}')) % 2 == 0:
        v2 = int(f'{stone}'[L//2:])
        v1 = int(f'{stone}'[:L//2])
        yield v2
        yield v1
    else:
        yield stone * 2024

def blink2(c: Counter):
    new_counter = Counter()
    for stone, count in c.items():
        for new_stone in change(stone):
             new_counter[new_stone] += count
    return new_counter


def part_two(data: List[str], verbose=False):
    c = parse2(data)
    for _ in range(75):
        c = blink2(c)
    return sum(c.values())

if __name__ == "__main__":
    data = read_entire_input(YEAR, DAY)
    part_one(data)
    part_two(data)