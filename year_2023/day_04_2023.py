"""Autogenerated solution template, v2"""
__version__ = 2

from typing import List, Any, Tuple, Set
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input
from collections import defaultdict

data = read_entire_input(2023,4)
test = """Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11""".split("\n")

def parse(data: List[str]) -> dict[int, Tuple[Set[int], Set[int]]]:
    games = {}
    for row in data:
        cards, numbers = row.split(": ")
        card_number = int(cards[5:])
        a, b = numbers.split(" | ")
        winning = set([int(i) for i in a.split(" ") if i != ''])
        own = set([int(i) for i in b.split(" ") if i != ''])
        games[card_number] = (winning, own)
    return games

#@solution_timer(2023,4,1)
def part_one(data: List[str], verbose=False):
    games = parse(data)
    tot = 0
    for game_number, (winning, own) in games.items():
        n = winning.intersection(own)
        if len(n) > 0:
            tot += 2**(len(n)-1)
    return tot

def const(n):
    def f():
        return n
    return f

def increment(cards_dict, card_number, score):
    s = cards_dict[card_number]
    for c in range(card_number+1, card_number+score+1):
        # try:
        cards_dict[c] += s
        # except IndexError as e:
            # print(c, "***")
    # print(card_number, score, list(range(card_number+1, card_number+score+1)), cards_dict)
    return cards_dict
    

#@solution_timer(2023,4,2)
def part_two(data: List[str], verbose=False):
    games = parse(data)
    # scores = {}
    cards = [1]*(len(games)+1)
    cards[0] = 0
    for game_number, (winning, own) in games.items():
        n = winning.intersection(own)
        score: int = len(n) #0 if len(n) == 0 else 2**(len(n)-1)
        # scores[game_number] = score
        cards = increment(cards, game_number, score)
        # input(cards)
    return sum(i for i in cards)

if __name__ == "__main__":
    data = read_entire_input(2023,4)
    part_one(data)
    part_two(data)