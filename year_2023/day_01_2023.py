"""Autogenerated solution template, v2"""
__version__ = 2

from typing import List, Any, Tuple
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input
from operator import itemgetter

data = read_entire_input(2023,1)
test = """1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet""".split("\n")

getter = itemgetter(0,-1)

def parse(data: List[str]) -> List[str]:
    return data

#@solution_timer(2023,1,1)
def part_one(data: List[str], verbose=False):
    calibration_data = parse(data)
    tot = 0
    for row in data:
        num = int(''.join(getter(list(filter(str.isdigit, row)))))
        tot += num

    return tot

keys = {
    '0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,
    'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'zero':0
}

def get_first(row: str) -> int:
    positions = [(row.find(key), keys[key]) for key in keys if row.find(key) >= 0]
    return sorted(positions)[0][1]

def get_last(row: str) -> int:
    row = row[::-1]
    positions = [(row.find(key[::-1]), keys[key]) for key in keys if row.find(key[::-1]) >= 0]
    return sorted(positions)[0][1]
    

#@solution_timer(2023,1,2)
def part_two(data: List[str], verbose=False):
    calibration_data = parse(data)
    tot = 0
    for row in calibration_data:
        first = get_first(row)
        last = get_last(row)
        tot += first * 10 + last
    return tot

if __name__ == "__main__":
    data = read_entire_input(2023,1)
    part_one(data)
    part_two(data)