"""Autogenerated solution template, v2"""
__version__ = 2

from typing import List, Any, Tuple
from framework.helpers import solution_timer
from framework.input_helper import read_entire_input

data = read_entire_input(2023,2)
test = """Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green""".split("\n")

def parse(data: List[str]) -> dict[str, list] :
    games: dict[str, list] = {}
    for row in data:
        game, rounds = row.split(": ")
        game_number = game[5:]

        rounds = rounds.split('; ')
        games[game_number] = []
        for round in rounds:
            colours = round.split(", ")
            red, blue, green = 0,0,0
            for colour in colours:
                n, col = colour.split(' ')
                if col == 'red':
                    red = n
                if col == 'blue':
                    blue = n
                if col == 'green':
                    green = n
            fround = [red, green, blue]
            games[game_number].append(fround)
    return games

#@solution_timer(2023,2,1)
def part_one(data: List[str], verbose=False):
    games = parse(data)
    at_most = (12,13,14)
    tot = 0
    for game_number, game_data in games.items():
        for round in game_data:
            if any([int(i) > int(j) for i,j in zip(round, at_most)]):
                break
        else:
            tot += int(game_number)
    return tot

#@solution_timer(2023,2,2)
def part_two(data: List[str], verbose=False):
    games = parse(data)
    results = {}
    tot = 0
    for game_number, game_data in games.items():
        r, g, b = [],[],[]
        for round in game_data:
            r.append(int(round[0]))
            g.append(int(round[1]))
            b.append(int(round[2]))
        # results[game_number] = [max(r), max(g), max(b)]
        tot += max(r) * max(g) *  max(b)
    return tot

if __name__ == "__main__":
    data = read_entire_input(2023,2)
    part_one(data)
    part_two(data)